[
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "website",
        "description": "website",
        "isExtraImport": true,
        "detail": "website",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Note(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.String(10000))\n    date = db.Column(db.DateTime(timezone=True), default=func.now())\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(150), unique=True)\n    password = db.Column(db.String(150))\n    first_name = db.Column(db.String(150))",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(150), unique=True)\n    password = db.Column(db.String(150))\n    first_name = db.Column(db.String(150))\n    notes = db.relationship('Note', backref='user')",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def login():\n    data = request.form\n    print(data)\n    return render_template('login.html')\n@auth.route('/logout')\ndef logout():\n    return \"<p>this is the Logout<p>\"\n@auth.route('/sign-up', methods=['GET', 'POST'])\ndef sign_up():\n    if request.method == 'POST':",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def logout():\n    return \"<p>this is the Logout<p>\"\n@auth.route('/sign-up', methods=['GET', 'POST'])\ndef sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        firstName = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n        if len(email) < 4:",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "sign_up",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        firstName = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n        if len(email) < 4:\n            flash('Email must be at least 4 characters long', category='error')\n        elif len(firstName) < 2:\n            flash('First name must be at least 2 characters long', category='error')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "auth =  Blueprint('auth', __name__)\n@auth.route('/login', methods=['GET', 'POST'])\ndef login():\n    data = request.form\n    print(data)\n    return render_template('login.html')\n@auth.route('/logout')\ndef logout():\n    return \"<p>this is the Logout<p>\"\n@auth.route('/sign-up', methods=['GET', 'POST'])",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def home():\n    return render_template(\"home.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "views",
        "kind": 5,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "views = Blueprint('views', __name__)\n@views.route('/')\ndef home():\n    return render_template(\"home.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = create_app()\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "main",
        "documentation": {}
    }
]